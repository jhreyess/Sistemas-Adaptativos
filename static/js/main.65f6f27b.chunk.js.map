{"version":3,"sources":["components/Blog/NavigationBar.js","components/Blog/Sidebar.js","components/Blog/Article.js","components/Blog/Image.js","components/Blog/Table.js","components/Blog/Legend.js","assets/roads.jpg","assets/cases.jpg","assets/graph.jpg","assets/equation1.jpg","assets/queue.jpg","components/Practica1.js","components/Practica2.js","components/Practica3.js","components/Practica4.js","components/Pia.js","index.js"],"names":["NavigationBar","useState","window","matchMedia","matches","setMatches","useEffect","addListener","e","changeStyle","target","classList","toggle","navLinks","document","getElementById","navbar","className","onClick","id","to","activeClassName","Sidebar","props","children","Article","Image","Table","Legend","Practica1","href","src","img1","alt","img2","img3","img4","img5","language","style","atelierHeathLight","wrapLongLines","width","height","title","frameBorder","allow","allowFullScreen","Practica2","Practica3","Practica4","Pia","App","exact","path","component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.65f6f27b.chunk.js","sourcesContent":["import {NavLink} from 'react-router-dom';\r\nimport { Fragment, useEffect, useState } from 'react';\r\n\r\nimport '../../styles/Navbar.css';\r\n\r\nfunction NavigationBar(){\r\n    \r\n    const [matches, setMatches] = useState(window.matchMedia(\"(min-width: 768px)\").matches)\r\n\r\n    useEffect(() => {\r\n      const handler = (e) => setMatches( e.matches );\r\n      window.matchMedia(\"(min-width: 768px)\").addListener(handler);\r\n    }, []);\r\n\r\n    const changeStyle = (e) => {\r\n        e.target.classList.toggle('active');\r\n        let navLinks = document.getElementById('navbarLinks');\r\n        navLinks.classList.toggle('open');\r\n        navLinks.classList.toggle('close');\r\n    }\r\n\r\n    const navbar = matches ? null : (\r\n        <Fragment>\r\n            <div className=\"navbarBanner\">\r\n                <div className=\"burgerIcon\" onClick={changeStyle}>\r\n                    <div className=\"burgerLine\"></div>\r\n                    <div className=\"burgerLine\"></div>\r\n                    <div className=\"burgerLine\"></div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n\r\n    return(\r\n        <nav className=\"navbar\">    \r\n            {navbar}\r\n            <div className=\"navbarLinks close\" id=\"navbarLinks\">\r\n                <NavLink to=\"/practica1\" activeClassName=\"active\" onClick={changeStyle}>Practica 1</NavLink>\r\n                <NavLink to=\"/practica2\" activeClassName=\"active\" onClick={changeStyle}>Practica 2</NavLink>\r\n                <NavLink to=\"/practica3\" activeClassName=\"active\" onClick={changeStyle}>Practica 3</NavLink>\r\n                <NavLink to=\"/practica4\" activeClassName=\"active\" onClick={changeStyle}>Practica 4</NavLink>\r\n                <NavLink to=\"/pia\" activeClassName=\"active\" onClick={changeStyle}>PIA</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavigationBar;","import '../../styles/Sidebar.css'\r\n\r\nfunction Sidebar(props){\r\n    return(\r\n        <div className=\"sidebarWrapper\">\r\n            <nav className=\"sidebar\">\r\n                {props.children}\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;","import '../../styles/Article.css'\r\n\r\nfunction Article(props){\r\n    return(\r\n        <article className=\"section\">\r\n            {props.children}\r\n        </article>\r\n    )\r\n}\r\n\r\nexport default Article;","import '../../styles/Image.css'\r\n\r\nfunction Image(props){\r\n    return(\r\n        <div className='imgWrapper'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Image;","import '../../styles/Table.css'\r\n\r\nfunction Table(props){\r\n    return(\r\n        <div className=\"table\">\r\n            <table>\r\n                {props.children}\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;","import '../../styles/Legend.css'\r\n\r\nfunction Legend(props){\r\n    return(\r\n        <div className=\"legend\">\r\n            <span>{props.children}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Legend;","export default __webpack_public_path__ + \"static/media/roads.4c91e9c8.jpg\";","export default __webpack_public_path__ + \"static/media/cases.67fb771b.jpg\";","export default __webpack_public_path__ + \"static/media/graph.69f3fb79.jpg\";","export default __webpack_public_path__ + \"static/media/equation1.7375545f.jpg\";","export default __webpack_public_path__ + \"static/media/queue.322f7b35.jpg\";","import SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { atelierHeathLight } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\n\r\nimport Sidebar from './Blog/Sidebar'\r\nimport Article from './Blog/Article'\r\nimport Images from './Blog/Image'\r\nimport Table from './Blog/Table'\r\nimport Legend from './Blog/Legend'\r\n\r\nimport img1 from '../assets/roads.jpg'\r\nimport img2 from '../assets/cases.jpg'\r\nimport img3 from '../assets/graph.jpg'\r\nimport img4 from '../assets/equation1.jpg'\r\nimport img5 from '../assets/queue.jpg'\r\n\r\nfunction Practica1(){\r\n    return(\r\n        <div className=\"content\">\r\n            <Sidebar>\r\n                <a href=\"#practica1/description\">Description</a>\r\n                <a href=\"#practica1/objectives\">Objectives</a>\r\n                <a href=\"#practica1/introduction\">Introduction</a>\r\n                <a href=\"#practica1/design\">Design</a>\r\n                <a href=\"#practica1/code\">Code</a>\r\n                <a href=\"#practica1/video\">Performance</a>\r\n                <a href=\"#practica1/conclusions\">Conclusions</a>\r\n                <a href=\"#practica1/references\">References</a>\r\n            </Sidebar>\r\n            <Article>\r\n                <h1>Adaptive Algorithm</h1><hr />\r\n                <h3 id=\"practica1/description\">Description</h3>\r\n                <p>In this activity it will be implemented a system that simulates\r\n                    congested streets and it adjust automatically the duration of the\r\n                    green traffic lights on the streets.\r\n                </p>\r\n                <h3 id=\"practica1/objectives\">Objectives</h3>\r\n                <ul>\r\n                    <li>Implement Traffic light control in an environment of intersections and avenues of various senses</li>\r\n                    <li>Make a report where you can describe your work and the results you got</li>\r\n                </ul>\r\n                <h3 id=\"practica1/introduction\">Introduction</h3>\r\n                <p>The problem was solved using Python and different modules such as Pygame for the simulation \r\n                    displaying and threading for the execution of the algorithm.\r\n                    The first task done was to creade the environment of intersectios and congested streets, after that,\r\n                    it was necesary to consider the different ways how adjustment could be solved, in this case, the\r\n                    analysis of the street lanes senses allows us to determine the quantity of queues and servers that\r\n                    the system have. Later in this document, it will be possible to observe the development of a MVC \r\n                    architecture implementing queues and threads.\r\n                </p>\r\n                <h3 id=\"practica1/design\">Cross Street Design</h3>\r\n                <p>In the diagram below, the different directions of the street lanes are shown, \r\n                    in which it is possible to see the straight direction and\r\n                    the turn direction.\r\n                    <br/>\r\n                    A symbology is attached to each lane to allow understanding of the problem.\r\n                </p>\r\n                <Images><img src={img1} alt=\"Roads\" /></Images>\r\n                <h3>Graphic Scheme</h3>\r\n                <Images><img src={img2} alt=\"Graph\" /></Images>\r\n                <h3>Conflict matrix</h3>\r\n                <Table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th></th><th>A1</th><th>A2</th><th>B1</th><th>B2</th><th>C1</th><th>C2</th><th>D1</th><th>D2</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Case 1</td>\r\n                            <td>1</td>\r\n                            <td>0</td>\r\n                            <td>0</td>\r\n                            <td>0</td>\r\n                            <td>1</td>\r\n                            <td>0</td>\r\n                            <td>0</td>\r\n                            <td>0</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Case 2</td>\r\n                            <td>0</td>\r\n                            <td>1</td>\r\n                            <td>0</td>\r\n                            <td>0</td>\r\n                            <td>0</td>\r\n                            <td>1</td>\r\n                            <td>0</td>\r\n                            <td>0</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Case 3</td>\r\n                            <td>0</td>\r\n                            <td>0</td>\r\n                            <td>1</td>\r\n                            <td>0</td>\r\n                            <td>0</td>\r\n                            <td>0</td>\r\n                            <td>1</td>\r\n                            <td>0</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Case 4</td>\r\n                            <td>0</td>\r\n                            <td>0</td>\r\n                            <td>0</td>\r\n                            <td>1</td>\r\n                            <td>0</td>\r\n                            <td>0</td>\r\n                            <td>0</td>\r\n                            <td>1</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n                <h3>Solution Design</h3>\r\n                <p>The first thing done was the separation of cases graphicly, in the image below it's possible\r\n                    to see the four cases and the street lanes that they integrate.\r\n                </p>\r\n                <Images><img src={img3} alt=\"Road cases\" /></Images>\r\n                <p>Subsequently it was necessary a mecanism to determine how many servers and queues the system would have\r\n                    and the service mechanism to be implemented. The next image represents the queue system that will be implemented.\r\n                    The input source has infinite size, this is because the cars will arrive randomly, and their arrival times are\r\n                    probabilistic. In this case the queue capacity is considered finite. The service discipline is a FIFO structure\r\n                    where the cars of one queue are catered while the other one is waiting. The time of service will be given by the \r\n                    traffic light considering the number of cars in each street lane at its service and given by the following equation.\r\n                </p>\r\n                <Images><img src={img4} alt=\"Equation (1)\" /></Images>\r\n                <Legend>Where 'n' is the number of cars in the queue, 't' stands for the pedestrian crossing time\r\n                    and 'm' is the maximum number of cars that can be in the queue.\r\n                </Legend>\r\n                <p>\r\n                    In the straight lanes, base time never goes under t, this allows to pedestrians to\r\n                    have a reference of the minimum time to cross the street, in this case 't' seconds.\r\n\r\n                    The green light assignation is a variable between the straight roads and the turn roads, because \r\n                    while the cars of the turn roads are moving, the pedestrian can´t cross, so in the X2 and Y2 roads \r\n                    the time is given by an arithmetic operation and in the X1 and Y1 roads the value of the \r\n                    operation is added to 5.\r\n                </p>\r\n                <p>The served clients are those cars that have already left behind the traffic light.</p>\r\n                <Images><img src={img5} alt=\"Queues\" /></Images>\r\n                <h3 id=\"practica1/code\">Code</h3>\r\n                <p>In the programming stage the problem was to find a correct way to make the system, implementing\r\n                    tools such as threads. The solution was obtained through the analysis of each member of the team.\r\n                    The general idea is raised grouping the street lanes by pairs, each pair was named by its position,\r\n                    (vertical = Y, horizontal = X), and by its direction (straight = 1, turn = 2), getting four groups \r\n                    described in the next list: </p>\r\n                    <ul>\r\n                        <li>roadsX1 : A1 C1</li>\r\n                        <li>roadsX2 : A2 C2</li>\r\n                        <li>roadsY1 : B1 D1</li>\r\n                        <li>roadsY2 : B2 D2</li>\r\n                    </ul>\r\n                <p>The first time of the green light was defined by the number of cars in the street lanes having a \r\n                    self adjustment that allows a better vehicular flow.<br />\r\n                \r\n                    The movement of the cars was done by the following function.\r\n                </p>\r\n                <div className=\"coding\">\r\n                <SyntaxHighlighter language=\"python\" style={atelierHeathLight} wrapLongLines={true}>\r\n    {`\r\n    def move(self, isGreen):\r\n        self.canMove = self.calculateDistance(self.stopPlace)\r\n        self.isRoadClear = self.calculateCarDistance()\r\n        if((self.isRoadClear and self.canMove) or isGreen):\r\n            if self.isVertical:\r\n                self.posY -= self.sign*self.carSpeed\r\n            else:\r\n                self.posX -= self.sign*self.carSpeed\r\n            if((self.posX < -400) or (self.posX > 1040) or (self.posY > 1040) or (self.posY < -400)):\r\n                self.newCoords()\r\n    `}\r\n                </SyntaxHighlighter>\r\n                </div>\r\n                <p>The different states of each traffic light are given by the next code:</p>\r\n                <div className=\"coding\">\r\n                <SyntaxHighlighter language=\"python\" style={atelierHeathLight} wrapLongLines={true}>\r\n    {`\r\n    def init(self):\r\n        while True:\r\n            if(self.state==1):\r\n                self.roadsX1.setState(True) # Turn Green\r\n                time = self.roadsX1.getTime()*(self.cross_time/self.maxCars) + self.cross_time\r\n                sleep(time)\r\n                self.roadsX1.setState(False) # Turn Red\r\n\r\n            elif(self.state==2):\r\n                self.roadsX2.setState(True) # Turn Green\r\n                time = self.roadsX2.getTime()*(self.cross_time/self.maxCars)\r\n                sleep(time)\r\n                self.roadsX2.setState(False) # Turn Red\r\n\r\n            elif(self.state==3):\r\n                self.roadsY1.setState(True) # Turn Green\r\n                time = self.roadsY1.getTime()*(self.cross_time/self.maxCars) + self.cross_time\r\n                sleep(time)\r\n                self.roadsY1.setState(False) # Turn Red\r\n\r\n            elif(self.state==4):\r\n                self.roadsY2.setState(True) # Turn Green\r\n                time = self.roadsY2.getTime()*(self.cross_time/self.maxCars)\r\n                sleep(time)\r\n                self.roadsY2.setState(False) # Turn Red\r\n                self.state = 0\r\n            \r\n            self.state += 1\r\n            if self.stop_threads:\r\n                self.roadsX1.stop()\r\n                self.roadsX2.stop()\r\n                self.roadsY1.stop()\r\n                self.roadsY1.stop()\r\n    `}\r\n                </SyntaxHighlighter>\r\n                </div>\r\n                <p>And the final time is obtained by the comparation between street lanes\r\n                    of each group of road, this because there are 2 servers, one for each axis (X and Y)\r\n                    and the time in which the cars advance is the opposite. (X1,Y1) and (X2,Y2)\r\n                </p>\r\n                <div className=\"coding\">\r\n                <SyntaxHighlighter language=\"python\" style={atelierHeathLight} wrapLongLines={true}>\r\n    {`\r\n    def getTime(self):\r\n        time1 = self.trafficLight1.getCrossTime()\r\n        time2 = self.trafficLight2.getCrossTime()\r\n        return time1 if time1 > time2 else time2\r\n    `}\r\n                </SyntaxHighlighter>\r\n                </div>\r\n                <p>The code in the main view file is the following:</p>\r\n                <div className=\"coding\">\r\n                <SyntaxHighlighter language=\"python\" style={atelierHeathLight} wrapLongLines={true}>\r\n    {`\r\n    import sys, pygame\r\n    import threading\r\n    from controller.roads import Roads\r\n\r\n    pygame.init()\r\n\r\n    # Screen settings\r\n    scale = {'width': 640, 'height': 640}\r\n    screen = pygame.display.set_mode((scale['width'], scale['height']))\r\n    pygame.display.set_caption(\"Traffic Lights\")\r\n    clock = pygame.time.Clock()\r\n\r\n    roads = Roads(screen)\r\n    roads_thread = threading.Thread(target=roads.init, name=\"Roads thread\").start()\r\n\r\n    while True:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                roads.stop_threads = True\r\n                pygame.quit()\r\n                sys.exit()\r\n        \r\n        roads.show()\r\n        roads.update()\r\n\r\n        clock.tick(60)\r\n    `}\r\n                </SyntaxHighlighter>\r\n                </div>\r\n                <h3 id=\"practica1/video\">Performance</h3>\r\n                <iframe style={{width: \"100%\", height: \"25vw\"}} src=\"https://www.youtube.com/embed/epZEQi-c4bI\" title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                <h3 id=\"practica1/conclusions\">Conclusion</h3>\r\n                <p>\r\n                    This activity was a total challenge for the teamwork, before reading the theory that involves an \r\n                    auto adjust system the ideas that each member had were too different to the final product. The \r\n                    correct analysis of the problem considering all the factors that can influence the output was \r\n                    very important, in this case it was necessary to see some videos about the topic and read some \r\n                    web pages about how an auto adjust system works, including theory about queues, threads, \r\n                    modular programming and the MVC architecture. Working with Python was simple because the \r\n                    implementation of its module named Pygame allows a better manipulation of the graphic \r\n                    interface and his components than other programming languages. The main problem was to \r\n                    create some threads that allow the execution of the different parts of the system such as queues \r\n                    (of cars) and servers (traffic lights), but it was solved with the structure mentioned before, the \r\n                    other problem was to implement the auto adjust, this considering the number of cars of the \r\n                    road that will advance and the time for the people that will cross the streets, this also was solved \r\n                    with the support of all the teamwork making a process based on an arithmetic operation. The \r\n                    problems made each member to think about a solution and give the idea to all the other \r\n                    members so with this the construction of this auto adjust system the team could reach the \r\n                    objectives and have a great solution of the traffic light control. To finalize, some improves that \r\n                    would be implemented are the substitution of the figures that make up the car for an image \r\n                    that represent better the concept, the same for the traffic lights, the last thing that would \r\n                    change is the duration of the green light for a more realistic, in this case the velocity of the cars \r\n                    must change. \r\n                </p>\r\n                <h3 id=\"practica1/references\">References</h3>\r\n                <ol>\r\n                    <li>3.9.7 Documentation. (n.d.). Python. Retrieved September 20, 2021, from <a href=\"https://docs.python.org/3/\">python.org</a></li>\r\n                    <li>Pygame Front Page - pygame v2.0.1. documentation. (n.d.). Retrieved September 20, 2021, from <a href=\"https://www.pygame.org/docs\">pygame.org</a></li>\r\n                    <li>Python threading tutorial: Run Code Concurrently Using the Threading Module. (2019) <a href=\"https://www.youtube.com/watch?v=IEEhzQoKtQU\">Youtube</a></li>\r\n                    <li>Svirca, Z. (2020, May 30). Everything you need to know about MVC architecture - Towards Data Science. Medium <a href=\"https://towardsdatascience.com/everything-you-need-to-know-about-mvc-architecture-3c827930b4c1#:%7E:text=%2DMVC%20is%20an%20architectural%20pattern,is%20invented%20\">Towards Data Science</a></li>\r\n                    <li>Teoría de Colas Conceptos básicos. (2012, March, 23). <a href=\"https://www.youtube.com/watch?v=jb3_zvj0w_c\">Youtube</a></li>\r\n                </ol>\r\n            </Article>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Practica1","import Article from './Blog/Article'\r\n\r\nfunction Practica2(){\r\n    return(\r\n        <Article>\r\n            Work in progress...\r\n        </Article>\r\n    )\r\n}\r\n\r\nexport default Practica2","import Article from './Blog/Article'\r\n\r\nfunction Practica3(){\r\n    return(\r\n        <Article>\r\n            Work in progress...\r\n        </Article>\r\n    )\r\n}\r\n\r\nexport default Practica3","import Article from './Blog/Article'\r\n\r\nfunction Practica4(){\r\n    return(\r\n        <Article>\r\n            Work in progress...\r\n        </Article>\r\n    )\r\n}\r\n\r\nexport default Practica4","import Article from './Blog/Article'\r\n\r\nfunction Pia(){\r\n    return(\r\n        <Article>\r\n            Work in progress...\r\n        </Article>\r\n    )\r\n}\r\n\r\nexport default Pia","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport './index.css';\n\nimport NavigationBar from './components/Blog/NavigationBar';\n\nimport Practica1 from './components/Practica1';\nimport Practica2 from './components/Practica2';\nimport Practica3 from './components/Practica3';\nimport Practica4 from './components/Practica4';\nimport Pia from './components/Pia';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n        <Router>\n          <NavigationBar />\n          <Switch>\n            <Route exact path=\"/practica1\" component={Practica1}/>\n            <Route exact path=\"/practica2\" component={Practica2}/>\n            <Route exact path=\"/practica3\" component={Practica3}/>\n            <Route exact path=\"/practica4\" component={Practica4}/>\n            <Route exact path=\"/pia\" component={Pia}/>\n            <Route path=\"/\" component={Practica1}/>\n          </Switch>\n        </Router>\n    </div>\n  );\n}\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root'));"],"sourceRoot":""}